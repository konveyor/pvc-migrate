- name: "Parsing pvc data"
  set_fact:
    mig_dest_pvc_data: []

- name: "Convert storage class"
  vars:
    mig_converted_sc:
      storage_class: "{{ mig_storage_class_mappings.get(item.storage_class+'_'+('RWX' if 'ReadWriteMany' in item.access_modes else ('ROX' if 'ReadOnlyMany' in item.access_modes else 'RWO')), item.storage_class)}}"
  set_fact:
    mig_dest_pvc_data: "{{ mig_dest_pvc_data + [(item | combine(mig_converted_sc, recursive=true))] }}"
  loop: "{{ pvcs }}"

- import_tasks: validate_pvs.yml

- name: "Ensure the pvcs are created on destination"
  k8s:
    state: present
    definition: "{{ lookup('template', 'pvc.yml.j2') }}"
  loop: "{{ mig_dest_pvc_data }}"
